{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","origin","process","MyIframeApi","constructor","send","setOnWelcome","onWelcome","this","welcome","console","log","howOldAreYou","App","Component","props","super","webApiBridge","WebApiBridge","myIframeApi","bind","setState","targetOrigin","apis","window","addEventListener","event","onMessage","data","target","parent","state","render","age","then","updatedAge","className","src","logo","alt","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,0MCK3C,MAAMC,EAASC,2BAEf,MAAMC,EACJC,YAAYC,GAAO,KAInBC,aAAgBC,IAAgBC,KAAKD,UAAYA,GAJ/B,KAMlBE,QAAWA,IACTC,QAAQC,IAAI,uBACZH,KAAKD,UAAUE,IARC,KAWlBG,aAAe,KACbF,QAAQC,IAAI,kBACLH,KAAKH,KAAK,eAAgB,MAAM,IAZvCG,KAAKH,KAAOA,GAgBhB,MAAMQ,UAAYC,YAChBV,YAAYW,GACVC,MAAMD,GACNP,KAAKS,aAAe,IAAIC,IACxBV,KAAKW,YAAc,IAAIhB,EAAYK,KAAKS,aAAaZ,KAAKe,KAAKZ,KAAKS,eACpET,KAAKW,YAAYb,aAAaG,GAAWD,KAAKa,SAAS,CAAEZ,aACzDD,KAAKS,aAAahB,OAASA,EAC3BO,KAAKS,aAAaK,aAAerB,EACjCO,KAAKS,aAAaM,KAAO,CAACf,KAAKW,aAC/BK,OAAOC,iBAAiB,UAAWC,GAASlB,KAAKS,aAAaU,UAAUD,EAAOA,EAAME,OACrFpB,KAAKS,aAAaY,OAASL,OAAOM,OAGlCtB,KAAKuB,MAAQ,GAGfC,SAAU,MAAD,EACkBxB,KAAKuB,MAAtBtB,EADD,EACCA,QAASwB,EADV,EACUA,IAMjB,OALIxB,IAAYwB,GACdzB,KAAKW,YAAYP,eACdsB,KAAKC,GAAc3B,KAAKa,SAAS,CAAEY,IAAKE,KAI3C,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BACK9B,GAAWwB,EAAb,uBAAmDxB,EAAnD,kBAAoEwB,GAAhD,iBAQlBpB,QClDK2B,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OAAO,kBAAC,EAAD,MAASa,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAKgB,IACjCA,EAAaC,iB","file":"static/js/main.eb9a5309.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst origin = process.env.REACT_APP_PARENT_ORIGIN;\n\nclass MyIframeApi {\n  constructor(send) {\n    this.send = send;\n  }\n\n  setOnWelcome = (onWelcome) => { this.onWelcome = onWelcome; }\n\n  welcome = (welcome) => {\n    console.log('got welcome message');\n    this.onWelcome(welcome);\n  }\n\n  howOldAreYou = () => {\n    console.log('asking for age');\n    return this.send('howOldAreYou', null, true);\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.webApiBridge = new WebApiBridge();\n    this.myIframeApi = new MyIframeApi(this.webApiBridge.send.bind(this.webApiBridge));\n    this.myIframeApi.setOnWelcome(welcome => this.setState({ welcome }));\n    this.webApiBridge.origin = origin;\n    this.webApiBridge.targetOrigin = origin;\n    this.webApiBridge.apis = [this.myIframeApi];\n    window.addEventListener('message', event => this.webApiBridge.onMessage(event, event.data));\n    this.webApiBridge.target = window.parent;\n    // enable to log all webapp messsages:\n    // this.webApiBridge.listener = (message) => { console.log(message); };\n    this.state = {};\n  }\n\n  render() {\n    const { welcome, age } = this.state;\n    if (welcome && !age) {\n      this.myIframeApi.howOldAreYou()\n        .then(updatedAge => this.setState({ age: updatedAge }));\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>webapp iframe</p>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {!(welcome && age) ? 'waiting...' : `from parent: ${welcome}, I'm: ${age}`}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
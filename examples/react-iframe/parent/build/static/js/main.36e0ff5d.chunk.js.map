{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["iframeOrigin","URL","process","origin","MyMainApi","constructor","send","welcome","message","console","log","this","howOldAreYou","Promise","resolve","App","Component","props","super","setIframe","iframe","webApiBridge","target","contentWindow","onload","myMainApi","WebApiBridge","bind","targetOrigin","apis","window","addEventListener","event","onMessage","data","render","className","src","title","ref","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAIA,MACMA,EAAe,IAAIC,IAAIC,+EAA8BC,OAG3D,MAAMC,EACJC,YAAYC,GAAO,KAInBC,QAAWC,IACTC,QAAQC,IAAI,qCACZC,KAAKL,KAAK,UAAW,CAACE,IAAU,IANhB,KASlBI,aAAe,IACb,IAAIC,QAASC,IACXL,QAAQC,IAAI,yBACZI,EAAQ,KAXVH,KAAKL,KAAOA,GAgBhB,MAAMS,UAAYC,YAChBX,YAAYY,GACVC,MAAMD,GADW,KAYnBE,UAAaC,IACNA,IAAUT,KAAKS,SAGpBT,KAAKS,OAASA,EACdT,KAAKU,aAAaC,OAASF,EAAOG,cAClCZ,KAAKS,OAAOI,OAAS,KACnBf,QAAQC,IAAI,oBACZC,KAAKc,UAAUlB,QAAQ,mBAlBzBI,KAAKU,aAAe,IAAIK,IACxBf,KAAKc,UAAY,IAAIrB,EAAUO,KAAKU,aAAaf,KAAKqB,KAAKhB,KAAKU,eAChEV,KAAKU,aAAalB,OAASH,EAC3BW,KAAKU,aAAaO,aAAe5B,EACjCW,KAAKU,aAAaQ,KAAO,CAAClB,KAAKc,WAC/BK,OAAOC,iBAAiB,UAAWC,GAASrB,KAAKU,aAAaY,UAAUD,EAAOA,EAAME,OAiBvFC,SACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BACEC,IApDMnC,8EAqDNoC,MAAM,wBACNC,IAAMnB,IAAaT,KAAKQ,UAAUC,MAEpC,+CAOKL,QCvDKyB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.36e0ff5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\nimport './App.css';\n\nconst iframeUrl = process.env.REACT_APP_WEBAPP;\nconst iframeOrigin = new URL(process.env.REACT_APP_WEBAPP).origin;\n\n\nclass MyMainApi {\n  constructor(send) {\n    this.send = send;\n  }\n\n  welcome = (message) => {\n    console.log('sending welcome message to iframe');\n    this.send('welcome', [message], false);\n  };\n\n  howOldAreYou = () => (\n    new Promise((resolve) => {\n      console.log('sending age to iframe');\n      resolve(3);\n    })\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.webApiBridge = new WebApiBridge();\n    this.myMainApi = new MyMainApi(this.webApiBridge.send.bind(this.webApiBridge));\n    this.webApiBridge.origin = iframeOrigin;\n    this.webApiBridge.targetOrigin = iframeOrigin;\n    this.webApiBridge.apis = [this.myMainApi];\n    window.addEventListener('message', event => this.webApiBridge.onMessage(event, event.data));\n    // enable to log all webapp messsages:\n    // this.webApiBridge.listener = (message) => { console.log(message); };\n  }\n\n  setIframe = (iframe) => {\n    if (!iframe || this.iframe) {\n      return;\n    }\n    this.iframe = iframe;\n    this.webApiBridge.target = iframe.contentWindow;\n    this.iframe.onload = () => {\n      console.log('iframeUrl loaded');\n      this.myMainApi.welcome('hello iframe');\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <iframe\n            src={iframeUrl}\n            title=\"iframe communications\"\n            ref={(iframe) => { this.setIframe(iframe); }}\n          />\n          <p>parent window</p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}